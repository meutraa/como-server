// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: como.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Como_Login_FullMethodName    = "/como.Como/Login"
	Como_Register_FullMethodName = "/como.Como/Register"
)

// ComoClient is the client API for Como service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComoClient interface {
	Login(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	Register(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
}

type comoClient struct {
	cc grpc.ClientConnInterface
}

func NewComoClient(cc grpc.ClientConnInterface) ComoClient {
	return &comoClient{cc}
}

func (c *comoClient) Login(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, Como_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comoClient) Register(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, Como_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComoServer is the server API for Como service.
// All implementations must embed UnimplementedComoServer
// for forward compatibility
type ComoServer interface {
	Login(context.Context, *AuthRequest) (*AuthResponse, error)
	Register(context.Context, *AuthRequest) (*AuthResponse, error)
	mustEmbedUnimplementedComoServer()
}

// UnimplementedComoServer must be embedded to have forward compatible implementations.
type UnimplementedComoServer struct {
}

func (UnimplementedComoServer) Login(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedComoServer) Register(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedComoServer) mustEmbedUnimplementedComoServer() {}

// UnsafeComoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComoServer will
// result in compilation errors.
type UnsafeComoServer interface {
	mustEmbedUnimplementedComoServer()
}

func RegisterComoServer(s grpc.ServiceRegistrar, srv ComoServer) {
	s.RegisterService(&Como_ServiceDesc, srv)
}

func _Como_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComoServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Como_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComoServer).Login(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Como_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComoServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Como_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComoServer).Register(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Como_ServiceDesc is the grpc.ServiceDesc for Como service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Como_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "como.Como",
	HandlerType: (*ComoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Como_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Como_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "como.proto",
}
